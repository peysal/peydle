/**
 * Build script to ease the pain.
 */

def rootWorkingFolder = [location : file(".") ]
def orchestra = [name: "orchestra"]
def dataRuntime = [name: "dataRuntime"]
def executionClient= [name: "executionClient"]
def masterConfig = [rootWorkingFolder, orchestra, dataRuntime, executionClient]

task ('showConfig') << {
    def header = "---My config---"
    println header
    masterConfig.each { config ->
        println config
    }
    header.size().times {print "-"}
}

task (deleteExecutionClient, type: Delete) {
    def backup = new File(executionClient.name + "Backup")
    if (backup.exists() ) {
        delete executionClient.name
    } else {
        println "Can't delete $executionClient.name when backup folder is not there"
    }
}

task (deleteDataFiles, type: Delete) {
    def backup = new File(dataRuntime.name + "/dataFiles" + "Backup")
    if (backup.exists() ) {
        delete dataRuntime.name + "/dataFiles"
    } else {
        println "Can't delete $dataRuntime.name" + "/dataFiles when backup folder is not there"
    }
}

task (restoreExecutionClient, type: Copy) {
    //will only works if got files inside folder
    from "${executionClient.name}Backup"
    into "$executionClient.name"
}

task (restoreDataFiles, type: Copy) {
    //will only works if got files inside folder
    from "${dataRuntime.name}/dataFilesBackup"
    into "$dataRuntime.name/dataFiles"
}


task (backupExecutionClient, type: Copy) {
    //will only works if got files inside folder..for now
    from "$executionClient.name"
    into "${executionClient.name}Backup"
}

task (backupDataFile, type: Copy) {
    //will only works if got files inside folder..for now
    from "$dataRuntime.name/dataFiles"
    into "${dataRuntime.name}/dataFilesBackup"
}

task refreshExecutionClient(
        dependsOn: [backupExecutionClient, deleteExecutionClient, restoreExecutionClient])

task refreshDataFiles(
        dependsOn: [backupDataFile, deleteDataFiles, restoreDataFiles]
)

task refreshTesting (
        dependsOn: [refreshExecutionClient, refreshDataFiles]
)
