/**
 * Build script to ease the pain.
 */

def rootWorkingFolder = [location : file(".") ]
def orchestra = [name: "orchestra"]
def dataRuntime = [name: "dataRuntime"]
def executionClient= [name: "executionClient"]
def testFolder = [name : "testFolder"]
def masterConfig = [rootWorkingFolder, orchestra, dataRuntime, executionClient, testFolder]

task ('showConfig') << {
    def header = "---My config---"
    println header
    masterConfig.each { config ->
        println config
    }
    header.size().times {print "-"}
}

task ('deleteExecutionClient', type: Delete) {
    def backup = new File(executionClient.name + "Backup")
    if (backup.exists() ) {
        delete executionClient.name
    } else {
        println "Can't delete $executionClient.name when backup folder is not there"
    }
}

task ('deleteDataFiles', type: Delete) {
    def backup = new File(dataRuntime.name + "/dataFiles" + "Backup")
    if (backup.exists() ) {
        delete dataRuntime.name + "/dataFiles"
    } else {
        println "Can't delete $dataRuntime.name" + "/dataFiles when backup folder is not there"
    }
}

task ('restoreExecutionClient', type: Copy) {
    //will only works if got files inside folder
    from "executionClientBackup"
    into "executionClient"
}

task ('restoreDataFiles', type: Copy) {
    //will only works if got files inside folder
    from "dataRuntime/dataFilesBackup"
    into "dataRuntime/dataFiles"
}


task ('backupExecutionClient', type: Copy) {
    //will only works if got files inside folder
    from "executionClient"
    into "executionClientBackup"
}

task ('backupDataFile', type: Copy) {
    //will only works if got files inside folder
    from "dataRuntime/dataFiles"
    into "dataRuntime/dataFilesBackup"
}

