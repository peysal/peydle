/**
 * Build script to ease the pain.
 */

def rootWorkingFolder = [location : file(".") ]
def orchestra = [name: "orchestra"]
def dataRuntime = [name: "dataRuntime"]
def executionClient= [name: "executionClient"]
def masterConfig = [rootWorkingFolder, orchestra, dataRuntime, executionClient]

task (showConfig) << {
    def header = "---My config---"
    println header
    masterConfig.each { config ->
        println config
    }
    header.size().times {print "-"}
}

task (deleteExecutionClient, type: Delete)  {
    delete executionClient.name
}

task (deleteDataFiles, type: Delete) {
    delete dataRuntime.name + "/DataFiles"
}

task (restoreExecutionClient, type: Copy) {
    //will only works if got files inside folder
    from "${executionClient.name}Backup"
    into "$executionClient.name"
}

task (restoreDataFiles, type: Copy) {
    //will only works if got files inside folder
    from "${dataRuntime.name}/DataFilesBackup"
    into "$dataRuntime.name/DataFiles"
}


task (backupExecutionClient, type: Copy) {
    //will only works if got files inside folder..for now
    from "$executionClient.name"
    into "${executionClient.name}Backup"
}

task (backupDataFiles, type: Copy) {
    //will only works if got files inside folder..for now
    from "$dataRuntime.name/DataFiles"
    into "${dataRuntime.name}/DataFilesBackup"
}

task initialBackup(dependsOn: [backupExecutionClient, backupDataFiles])

task refreshExecutionClient(
        dependsOn: [deleteExecutionClient, restoreExecutionClient])

task refreshDataFiles(
        dependsOn: [deleteDataFiles, restoreDataFiles]
)

task refreshTesting (
        dependsOn: [refreshExecutionClient, refreshDataFiles]
)
