/**
 * Build script to ease the pain.
 * This script and its property file need to be at the root of executionClient and dataRuntime folder
 */
apply plugin:'groovy'

def rootWorkingFolder = [location : file(".") ]
def orchestra = [name: orchestra]
def dataRuntime = [name: dataRuntime]
def executionClient= [name: executionClient]
def masterConfig = [rootWorkingFolder, orchestra, dataRuntime, executionClient]

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile 'org.apache.commons:commons-vfs2:2.0'
    compile 'org.apache.ant:ant:1.8.2'
    runtime files('lib/sqljdbc.jar')
}

task (showConfig) << {
    def header = "---My config---"
    println header
    masterConfig.each { config ->
        println config
    }
    header.size().times {print "-"}
}

task (deleteExecutionClient) << {
    ant.delete(dir: executionClient.name)
}

task (deleteDataFiles) << {
    ant.delete(dir: "${dataRuntime.name}/DataFiles")
}

task (deleteLogs) << {
    ant.delete {
        fileset(dir: "${orchestra.name}/apps/logs", includes: "**/*.*")
    }
}

task (restoreExecutionClient) << {
    ant.copy(todir: "$executionClient.name") {
        fileset(dir: "${executionClient.name}Backup")
    }
}

task (restoreDataFiles) << {
    ant.copy(todir: "$dataRuntime.name/DataFiles") {
        fileset(dir: "${dataRuntime.name}/DataFilesBackup")
    }
}

task (backupExecutionClient) << {
    ant.copy(todir: "${executionClient.name}Backup") {
        fileset(dir: "$executionClient.name")
    }
}

task (backupDataFiles) << {
    ant.copy(todir: "${dataRuntime.name}/DataFilesBackup") {
        fileset(dir: "$dataRuntime.name/DataFiles")
    }
}

/**
 * btNumber default value will be override with value pass when executed with gradle
 */
def backupLocation = "${executionClient.name}/backup"
def btPath = new File("${businessTestFolderPath}/${btNumber}")
def incomingPath = new File("${executionClient.name}/incoming")
task (preparation, dependsOn: 'classes', type: JavaExec) {
    main = 'main.groovy.Preparation'
    classpath = sourceSets.main.runtimeClasspath
    args btPath.absolutePath, new File(backupLocation).absolutePath, incomingPath.absolutePath, secondsToSleep
}

task (scenario, dependsOn: 'classes', type: JavaExec) {
    main = 'main.groovy.Scenario'
    classpath = sourceSets.main.runtimeClasspath
}

task (validation, dependsOn: 'classes', type: JavaExec) {
    main = 'main.groovy.Validation'
    classpath = sourceSets.main.runtimeClasspath
}

task (clearDb, dependsOn: 'classes', type: JavaExec) {
    main = 'main.groovy.ClearDatabase'
    classpath = sourceSets.main.runtimeClasspath
    args dbDriver, dbServer, dbPort, dbUser, dbPassword, cycleDb, monthlyDb
}

task (isCycleContainData, dependsOn: 'classes', type: JavaExec) {
    main = 'main.groovy.IsCycleContainData'
    classpath = sourceSets.main.runtimeClasspath
    args dbDriver, dbServer, dbPort, dbUser, dbPassword, cycleDb
}

task (isMonthlyContainData, dependsOn: 'classes', type: JavaExec) {
    main = 'main.groovy.IsMonthlyContainData'
    classpath = sourceSets.main.runtimeClasspath
    args dbDriver, dbServer, dbPort, dbUser, dbPassword, monthlyDb
}

task initialBackup(dependsOn: [backupExecutionClient, backupDataFiles])

task refreshExecutionClient(
        dependsOn: [deleteExecutionClient, restoreExecutionClient])

task refreshDataFiles(
        dependsOn: [deleteDataFiles, restoreDataFiles]
)

task refreshTesting (
        dependsOn: [refreshExecutionClient, refreshDataFiles, clearDb]
)

task isDbContainData(
        dependsOn: [isCycleContainData, isMonthlyContainData]
)
